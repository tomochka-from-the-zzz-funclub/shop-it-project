// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"buyers-service/internal/interfaces"
	"buyers-service/internal/models/request"
	"buyers-service/internal/models/response"
	"context"
	"github.com/google/uuid"
)

type serverBuyersService struct {
	svc        interfaces.BuyersService
	register   BuyersServiceRegister
	login      BuyersServiceLogin
	getBuyer   BuyersServiceGetBuyer
	deleteUser BuyersServiceDeleteUser
}

type MiddlewareSetBuyersService interface {
	Wrap(m MiddlewareBuyersService)
	WrapRegister(m MiddlewareBuyersServiceRegister)
	WrapLogin(m MiddlewareBuyersServiceLogin)
	WrapGetBuyer(m MiddlewareBuyersServiceGetBuyer)
	WrapDeleteUser(m MiddlewareBuyersServiceDeleteUser)

	WithMetrics()
	WithLog()
}

func newServerBuyersService(svc interfaces.BuyersService) *serverBuyersService {
	return &serverBuyersService{
		deleteUser: svc.DeleteUser,
		getBuyer:   svc.GetBuyer,
		login:      svc.Login,
		register:   svc.Register,
		svc:        svc,
	}
}

func (srv *serverBuyersService) Wrap(m MiddlewareBuyersService) {
	srv.svc = m(srv.svc)
	srv.register = srv.svc.Register
	srv.login = srv.svc.Login
	srv.getBuyer = srv.svc.GetBuyer
	srv.deleteUser = srv.svc.DeleteUser
}

func (srv *serverBuyersService) Register(ctx context.Context, email string, password string, buyer request.BuyerCreate) (userID uuid.UUID, err error) {
	return srv.register(ctx, email, password, buyer)
}

func (srv *serverBuyersService) Login(ctx context.Context, email string, password string) (token string, err error) {
	return srv.login(ctx, email, password)
}

func (srv *serverBuyersService) GetBuyer(ctx context.Context, id uuid.UUID) (res response.BuyerInfo, err error) {
	return srv.getBuyer(ctx, id)
}

func (srv *serverBuyersService) DeleteUser(ctx context.Context, id uuid.UUID) (err error) {
	return srv.deleteUser(ctx, id)
}

func (srv *serverBuyersService) WrapRegister(m MiddlewareBuyersServiceRegister) {
	srv.register = m(srv.register)
}

func (srv *serverBuyersService) WrapLogin(m MiddlewareBuyersServiceLogin) {
	srv.login = m(srv.login)
}

func (srv *serverBuyersService) WrapGetBuyer(m MiddlewareBuyersServiceGetBuyer) {
	srv.getBuyer = m(srv.getBuyer)
}

func (srv *serverBuyersService) WrapDeleteUser(m MiddlewareBuyersServiceDeleteUser) {
	srv.deleteUser = m(srv.deleteUser)
}

func (srv *serverBuyersService) WithMetrics() {
	srv.Wrap(metricsMiddlewareBuyersService)
}

func (srv *serverBuyersService) WithLog() {
	srv.Wrap(loggerMiddlewareBuyersService())
}
