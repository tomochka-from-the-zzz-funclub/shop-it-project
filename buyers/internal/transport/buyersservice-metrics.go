// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"buyers-service/internal/interfaces"
	"buyers-service/internal/models/request"
	"buyers-service/internal/models/response"
	"context"
	"fmt"
	"github.com/go-kit/kit/metrics"
	"github.com/google/uuid"
	"time"
)

type metricsBuyersService struct {
	next            interfaces.BuyersService
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareBuyersService(next interfaces.BuyersService) interfaces.BuyersService {
	return &metricsBuyersService{
		next:            next,
		requestCount:    RequestCount.With("service", "BuyersService"),
		requestCountAll: RequestCountAll.With("service", "BuyersService"),
		requestLatency:  RequestLatency.With("service", "BuyersService"),
	}
}

func (m metricsBuyersService) Register(ctx context.Context, email string, password string, buyer request.BuyerCreate) (userID uuid.UUID, err error) {

	defer func(_begin time.Time) {
		m.requestLatency.With("method", "register", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "register", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "register").Add(1)

	return m.next.Register(ctx, email, password, buyer)
}

func (m metricsBuyersService) Login(ctx context.Context, email string, password string) (token string, err error) {

	defer func(_begin time.Time) {
		m.requestLatency.With("method", "login", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "login", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "login").Add(1)

	return m.next.Login(ctx, email, password)
}

func (m metricsBuyersService) GetBuyer(ctx context.Context, id uuid.UUID) (res response.BuyerInfo, err error) {

	defer func(_begin time.Time) {
		m.requestLatency.With("method", "getBuyer", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getBuyer", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getBuyer").Add(1)

	return m.next.GetBuyer(ctx, id)
}

func (m metricsBuyersService) DeleteUser(ctx context.Context, id uuid.UUID) (err error) {

	defer func(_begin time.Time) {
		m.requestLatency.With("method", "deleteUser", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "deleteUser", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "deleteUser").Add(1)

	return m.next.DeleteUser(ctx, id)
}
