// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"buyers-service/internal/interfaces"
	"buyers-service/internal/models/request"
	"buyers-service/internal/models/response"
	"buyers-service/internal/transport/viewer"
	"context"
	"github.com/google/uuid"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerBuyersService struct {
	next interfaces.BuyersService
}

func loggerMiddlewareBuyersService() MiddlewareBuyersService {
	return func(next interfaces.BuyersService) interfaces.BuyersService {
		return &loggerBuyersService{next: next}
	}
}

func (m loggerBuyersService) Register(ctx context.Context, email string, password string, buyer request.BuyerCreate) (userID uuid.UUID, err error) {
	logger := log.Ctx(ctx).With().Str("service", "BuyersService").Str("method", "register").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "buyersService.register",
				"request": viewer.Sprintf("%+v", requestBuyersServiceRegister{
					Buyer:    buyer,
					Email:    email,
					Password: password,
				}),
				"response": viewer.Sprintf("%+v", responseBuyersServiceRegister{UserID: userID}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call register")
			return
		}
		logger.Info().Func(logHandle).Msg("call register")
	}(time.Now())
	return m.next.Register(ctx, email, password, buyer)
}

func (m loggerBuyersService) Login(ctx context.Context, email string, password string) (token string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "BuyersService").Str("method", "login").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "buyersService.login",
				"request": viewer.Sprintf("%+v", requestBuyersServiceLogin{
					Email:    email,
					Password: password,
				}),
				"response": viewer.Sprintf("%+v", responseBuyersServiceLogin{Token: token}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call login")
			return
		}
		logger.Info().Func(logHandle).Msg("call login")
	}(time.Now())
	return m.next.Login(ctx, email, password)
}

func (m loggerBuyersService) GetBuyer(ctx context.Context, id uuid.UUID) (res response.BuyerInfo, err error) {
	logger := log.Ctx(ctx).With().Str("service", "BuyersService").Str("method", "getBuyer").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "buyersService.getBuyer",
				"request":  viewer.Sprintf("%+v", requestBuyersServiceGetBuyer{Id: id}),
				"response": viewer.Sprintf("%+v", responseBuyersServiceGetBuyer{Res: res}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getBuyer")
			return
		}
		logger.Info().Func(logHandle).Msg("call getBuyer")
	}(time.Now())
	return m.next.GetBuyer(ctx, id)
}

func (m loggerBuyersService) DeleteUser(ctx context.Context, id uuid.UUID) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "BuyersService").Str("method", "deleteUser").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "buyersService.deleteUser",
				"request":  viewer.Sprintf("%+v", requestBuyersServiceDeleteUser{Id: id}),
				"response": viewer.Sprintf("%+v", responseBuyersServiceDeleteUser{}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call deleteUser")
			return
		}
		logger.Info().Func(logHandle).Msg("call deleteUser")
	}(time.Now())
	return m.next.DeleteUser(ctx, id)
}
